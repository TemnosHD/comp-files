#! /bin/bash
set -e
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'echo FAILED COMMAND: $previous_command' EXIT

#-------------------------------------------------------------------------------------------
# This script will download packages for, configure, build and install a GCC cross-compiler.
# Customize the variables (INSTALL_PATH, TARGET, etc.) to your liking before running.
# If you get an error and need to resume the script from some point in the middle,
# just delete/comment the preceding lines before running it again.
#
# See: http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler
#-------------------------------------------------------------------------------------------

INSTALL_PATH=/wang/users/heimarth/cluster_home/cross-comp/new-toolchain/cross
TARGET=ppc-linux
USE_NEWLIB=0
LINUX_ARCH=powerpc
CONFIGURATION_OPTIONS="--disable-multilibu --enable-checking" #--disable-threads" # --disable-shared
PARALLEL_MAKE="-j10 -l20"
BINUTILS_VERSION=binutils-2.25
GCC_VERSION=gcc-4.9.2
LINUX_KERNEL_VERSION=linux-3.17.2
GLIBC_VERSION=glibc-2.20
MPFR_VERSION=mpfr-3.1.2
GMP_VERSION=gmp-6.0.0a
MPC_VERSION=mpc-1.0.2
ISL_VERSION=isl-0.12.2
CLOOG_VERSION=cloog-0.18.1
HOST=$TARGET
VERBOSE=-v
SOURCE_PATH=/wang/users/heimarth/cluster_home/cross-comp/new-toolchain
BUILD_PATH=build
export PATH=$INSTALL_PATH/bin:$PATH

## Make symbolic links
#cd $GCC_VERSION
#ln -sf `ls -1d ../mpfr-*/` mpfr
#ln -sf `ls -1d ../gmp-*/` gmp
#ln -sf `ls -1d ../mpc-*/` mpc
#ln -sf `ls -1d ../isl-*/` isl
##ln -sf `ls -1d ../cloog-*/` cloog
#cd ..


##Step 1. Binutils
mkdir -p build-binutils
cd build-binutils
../$BINUTILS_VERSION/configure --prefix=$INSTALL_PATH --target=$TARGET $CONFIGURATION_OPTIONS
make $PARALLEL_MAKE
make install
cd ..


# Step 2. Linux Kernel Headers
if [ $USE_NEWLIB -eq 0 ]; then
    cd $LINUX_KERNEL_VERSION
    make ARCH=$LINUX_ARCH INSTALL_HDR_PATH=$INSTALL_PATH/$TARGET headers_install
    cd ..
fi


# Step 3. C/C++ Compilers

cd $GCC_VERSION
sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure
cd ..

mkdir -p build-gcc
cd build-gcc
if [ $USE_NEWLIB -ne 0 ]; then
	    NEWLIB_OPTION=--with-newlib
fi
../$GCC_VERSION/configure $VERBOSE --prefix=$INSTALL_PATH --target=$TARGET --enable-languages=c,c++ $CONFIGURATION_OPTIONS $NEWLIB_OPTION 
make $PARALLEL_MAKE all-gcc #| grep "error" 
make install-gcc #| grep "error"
cd ..

#if [ $USE_NEWLIB -ne 0 ]; then
#    # Steps 4-6: Newlib
#    mkdir -p build-newlib
#    cd build-newlib
#    ../newlib-master/configure --prefix=$INSTALL_PATH --target=$TARGET $CONFIGURATION_OPTIONS
#    make $PARALLEL_MAKE
#    make install
#    cd ..
#else
#    # Step 4. Standard C Library Headers and Startup Files
#    mkdir -p build-glibc
#    cd build-glibc
#    CFLAGS="-O2 -fno-stack-protector"
#    ../$GLIBC_VERSION/configure --prefix=$INSTALL_PATH/$TARGET --build=$MACHTYPE --disable-profile --enable-kernel=2.6.32 --host=$TARGET --target=$TARGET --with-headers=$INSTALL_PATH/$TARGET/include $CONFIGURATION_OPTIONS libc_cv_forced_unwind=yes libc_cv_ctors_header=yes libc_cv_c_cleanup=yes
#    make install-bootstrap-headers=yes install-headers
#    make $PARALLEL_MAKE csu/subdir_lib
#    install csu/crt1.o csu/crti.o csu/crtn.o $INSTALL_PATH/$TARGET/lib
#    cd ..
#
#    # Step 5. Compiler Support Library
#    cd build-gcc
#    make $PARALLEL_MAKE all-target-libgcc
#    make install-target-libgcc
#    cd ..
#
#    # Step 6. Standard C Library & the rest of Glibc
#    cd build-glibc
#    make $PARALLEL_MAKE
#    make install
#    cd ..
#fi
#
## Step 7. Standard C++ Library & the rest of GCC
#cd build-gcc
#make $PARALLEL_MAKE all
#make install
#cd ..

trap - EXIT

echo 'Updated!'
